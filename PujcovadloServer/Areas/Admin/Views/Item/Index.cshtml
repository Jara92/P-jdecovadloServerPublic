@using X.PagedList.Mvc.Core
@using PujcovadloServer.Business.Enums
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model PujcovadloServer.Areas.Admin.ViewModels.ItemViewModel
@inject IStringLocalizer<ItemStatus> StatusLocalizer

@{
    Layout = "_Layout";
    ViewData["Title"] = @Localizer["Items"];
    var firstItem = Model.Items.FirstOrDefault();
}

@section Searchbar
{
    <form asp-action="Index" method="get">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <div class="input-group">
                        <input type="text" class="form-control" asp-for="Filter.Search" value="@Model.Filter.Search" placeholder="@Localizer["Search"]"/>
                        <button type="submit" class="btn btn-primary">
                            <i class="fa fa-search"></i>
                        </button>
                    </div>
                    <span asp-validation-for="Filter.Search" class="text-danger"></span>
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group">
                    <label asp-for="Filter.Status" class="control-label d-none"></label>
                    @Html.DropDownListFor(model => model.Filter.Status,
                        Enum.GetValues(typeof(ItemStatus))
                            .Cast<ItemStatus>()
                            .Select(e => new SelectListItem
                            {
                                Text = StatusLocalizer[e.ToString()],
                                Value = e.ToString()
                            }),
                        "Select Status",
                        new { @class = "form-select", @id = "status" })
                    <span asp-validation-for="Filter.Status" class="text-danger"></span>
                </div>
            </div>
        </div>
    </form>
}

<div class="card mb-4">
    <div class="card-body">
        <table class="table">
            <thead>
            @if (firstItem != null)
            {
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => firstItem.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => firstItem.Alias)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => firstItem.Status)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => firstItem.PricePerDay)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => firstItem.RefundableDeposit)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => firstItem.SellingPrice)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => firstItem.CreatedAt)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => firstItem.UpdatedAt)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => firstItem.ApprovedAt)
                    </th>
                    <th>
                        @Localizer["Actions"]
                    </th>
                </tr>
            }
            </thead>

            <tbody>
            @foreach (var item in Model.Items)
            {
                <tr class="align-middle">
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Alias)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PricePerDay)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.RefundableDeposit)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.SellingPrice)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedAt)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UpdatedAt)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ApprovedAt)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">@Localizer["Edit"]</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">@Localizer["Delete"]</a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div> <!-- /.card-body -->
    <div class="card-footer clearfix">
        <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
        @Html.PagedListPager(Model.Items, page =>
            {
                // Update the page number in the filter
                Model.Filter.Page = page;

                // Generate the URL for the page
                return Url.Action("Index", Model.Filter);
            },
            new PagedListRenderOptions
            {
                ContainerDivClasses = new[] { "pagination pagination-sm m-0 float-end" },
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" },
                LinkToPreviousPageFormat = "<",
                LinkToNextPageFormat = ">",
            })
    </div>
</div>